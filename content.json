[{"title":"总有你没看过的css透明度全总结","date":"2017-02-27T15:01:21.000Z","path":"2017/02/27/总有你没看过的css透明度全总结/","text":"日常吐槽 最近写页面要兼容IE8，这让我用了一年多vue的人转回来玩Jquery，不停的addClass,removeClass,attr….要多糟心有多糟心了~这不，IE8透明度这兼容问题又来了么;废话不多说，马上总结开始。 内容概要 在以下总结内容，你将看到 opacity的适用情况; IE9+透明度的最佳替代方案； IE8-的透明度常规兼容方法； 利用套路反杀IE8-兼容； 内容开始 1, 需求描述如下图要求实现底色为蓝色且具有一定透明度透出地图的效果 2, 常规方法及兼容方法很多第一次做透明度的人脑袋一拍就想到了CSS3的opacity，即 2.1, 方案一: opacity1234567div&#123; /*其他属性设置此处不再概述*/ /*........*/ color: #fff; background-color: #00008b; opacity: 0.5;&#125; 总体外观来说不是差别很明显，但仔细一比较还是发现，里面的内容也被透明了，细看文字也没这么亮的感觉。 优点：最容易想到 缺点：子元素会继承透明度，不符需求 方案一不行，就开始有人百度结果了，然后很快会查到CSS3的另一个透明度写法，即 2.2, 方案二: RGBA123456div&#123; /*其他属性设置此处不再概述*/ /*........*/ color: #fff; background-color: rgba(0, 0, 139,0.5);&#125; 效果完美实现，但是在IE8及以下的浏览器中，全输挂了；如果我们只为了得出这一个解法，那也不能叫全总结了；另外个人吐槽一下这个写法，每次都要转颜色格式很烦的有木有！ 优点：完美实现 缺点：不兼容低版本浏览器，颜色值转换略烦 一想到透明度IE8兼容,立马就有人想到了ie的filter滤镜，即 2.3, 方案三: filter: alpha(opacity=XX)1234567div&#123; /*其他属性设置此处不再概述*/ /*........*/ filter:alpha(opacity=50); -ms-filter:&quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=50)&quot;; filter:progid:DXImageTransform.Microsoft.Alpha(Opacity=50);&#125; 此方案是这次讨论方案中最差劲的一个，原则上来说是完全实现不了，原因如下 该方案与我们讨论的opacity是类似的，子节点会继承透明度； 该方案中，我们会考虑IE8中正常底色，IE9中透明底色，然后再用滤镜去透明；事实上，IE中的background-color的 transparent属性存在兼容问题，它会被解析成background: none；最终导致css的hack失败，IE中全部无底色了； 该方案中利用滤镜去透明这一步，我们会想在IE8的时候用filter，IE9使用rgba即可，事实上，这个滤镜在ie8及ie9下 皆能被解析，从而导致ie9双重透明 以上3条原因导致此方案完全不可实现当前需求，不过作为兼容方法的一种还是值得留意的 优点：终于兼容了 缺点：对不上需求 以上方法都不行后，很多人就要祭出大招了~~ 2.4, 方案四: 万能贴图法123div&#123; background: url(...) left top repeat;&#125; 这个方法就是事先按透明度切除一个10*10的透明图层，然后通过背景图重复的方法达到底色透明的目的； 优点：万能 缺点：透明度不确定，颜色不确定时，工作量很大，不够灵活 3，利用套路兼得需求和兼容 3.1,套路一：你走你的道，我过我的桥 我们在2.1方案和2.3的缺点上都提到了一点，即子节点会被继承透明度的问题；那么我们换个想法，我们把透明度设在一个 空节点上不就不影响其他节点上了么，然后在利用定位，把他铺满到全屏最底层就解决了；如下： 1234567891011121314151617181920212223div&#123; /*其他属性设置此处不再概述*/ /*........*/ position: relative;&#125; div:before&#123; content: &quot;&quot;; width: 100%; height: 100%; position: absolute; left: 0; top: 0; z-index: 0; background-color: #00008b; opacity: 0.5; -ms-filter:&quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=50)&quot;; filter:alpha(opacity=50); filter:progid:DXImageTransform.Microsoft.Alpha(Opacity=50);&#125;div &gt; ...&#123; position: ..., z-index: 10&#125; 这样就完美隔离了透明度影响节点的问题，唯一麻烦的是需要把当前节点下的其余节点嵌套到一个容器里去，然后设 置合适的z-index值； 当然以上方法中有个问题即是IE8中不支持伪元素颜色的透明，所以需要做到IE8兼容的情况，就需要自己手动的在节 点下做一个底色透明容器,即: 1234567891011121314div &gt; .before&#123; content: &quot;&quot;; width: 100%; height: 100%; position: absolute; left: 0; top: 0; z-index: 0; background-color: #00008b; opacity: 0.5; -ms-filter:&quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=50)&quot;; filter:alpha(opacity=50); filter:progid:DXImageTransform.Microsoft.Alpha(Opacity=50); &#125; 3.2,套路二：狭路相逢不要脸的胜，不行就强上 我们讨论了这么多透明度的方法，在不考虑兼容的情况下，效果最完美的就是 方案二：RGBA了，然后遇到IE8，能否有兼容办法呢，答案是有的，这里我们要用到一下IE滤镜中的渐变滤镜了，即1filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=XXX,endColorstr=XXX) 我们需要传进去的参数就两个，渐变起始色和渐变结束色，我们只需要透明即可，不需要渐变；因此起始色和渐变色是一致的，而这个渐变滤镜的颜色传值共9位，即1#AABBBBBB 包含三个部分组成的， 第一部分是固定的#符号， 第二部分是颜色的透明度，该透明度的计算方法是1[0-1]之间的透明值*255，然后转换为16进制 在这里我列举一些常用的透明度对应值以供参考： 透明值 转换后16进制值 0.1 19 0.2 33 0.3 4C 0.4 66 0.5 7F 0.6 99 0.7 B2 0.8 C8 0.9 E5 3.是被透明颜色的16进制，即我们常写的FFFFFF,000000等等举例来说：即是1234567div&#123; /*其他属性设置此处不再概述*/ /*........*/ color: #fff; background-color: rgba(0, 0, 139,0.5); filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#7F00008B,endColorstr=#7F00008B)&#125; 总结 我们对透明度的用法做了一个总结如下表 方法 优点 缺点 opacity 简单 不兼容IE，透明继承 rgba 简单 不兼容IE，透明不继承 alpha滤镜 仅IE适用 兼容性不好控制，透明继承 贴图 万能 麻烦，灵活性性差 透明空容器法 兼容IE 需要变更结构 gradient滤镜 仅IE适用 需要计算色值 通过以上总结，希望再次遇见透明度的相关需求的时候，能够选择合适的搭配，找到鱼和熊掌兼得的方法 本文属于原创，转载请注明出处：http://hmdeng110.github.io/","tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"},{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"},{"name":"透明度","slug":"透明度","permalink":"http://yoursite.com/tags/透明度/"},{"name":"套路","slug":"套路","permalink":"http://yoursite.com/tags/套路/"},{"name":"原创","slug":"原创","permalink":"http://yoursite.com/tags/原创/"}]},{"title":"有关list-style的一点查缺补漏","date":"2017-02-23T14:28:17.000Z","path":"2017/02/23/list-style的差缺补漏/","text":"今天做页面的时候遇到list-style设置失效的问题，具体的需求是这样的：固定容器的高，内部有左右两侧，左侧为一张缩略图；右侧分为上下两部分，上部分为标题，下部分为一列表；如下图 悬浮前： 悬浮后： 要求：实现鼠标移上去去的时候展开列表，且把列表标记显示为方块；如上图 结构搭建和样式都很简单，但却遇到了一个问题是；默认我的写法是 123456789101112ul &gt; li&#123; list-style: none; display: none; color: #cc8167;&#125;ul &gt; li:first-child&#123; display: block;&#125;div.a:hover li&#123; display: block; list-style: square inside;&#125; 这种写法始终无效，鼠标放上去其他属性很正常，就是列表标记不出来；查了网上资源，多是说float影响或者距离不够，但我并未float且已设置为 1list-style-position: inside 不应该出现的呀，后来去w3cschoo再次细看了这个属性，发现了这一句 该属性是一个简写属性，涵盖了所有其他列表样式属性。由于它应用到所有 display 为 list-item 的元素，所以在普通的 HTML 和 XHTML 中只能用于 li 元素，不过实际上它可以应用到任何元素，并由 list-item 元素继承。 你可以点击这里去看详细说明； 然后修改代码为 123456789101112ul &gt; li&#123; list-style: none; display: none; color: #cc8167;&#125;ul &gt; li:first-child&#123; display: list-item;&#125;div.a:hover li&#123; display: list-item; list-style: square inside;&#125; 这样就可以了；也算是差缺补漏了一个知识点，另外这个属性值可以设3个，其中第三个可以设为自定义图片还是很方便的 这个问题解决了，新的问题来了，不同浏览器之间，这个列表标记与文字之间的间距并不一致，甚至可以说是过大了，这又成了个问题；这我暂时没有找到可行的方法，有知道的麻烦指教一下， 最终我还是采用了before伪元素的形式去实现的，毕竟这种方式间距控制还是很简单的。 欢迎指正，转载请注明出处！","tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/前端/"},{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"自我介绍","date":"2017-02-20T14:28:17.000Z","path":"2017/02/20/开场/","text":"####大家好，这里是 404-NOTFOUND； 先做个自我介绍，我是一名码农，细化一点叫 前端工程师，圈内常用名为404-NOTFOUND,有时也叫404，当然名字冲突的时候我还会化身为403-NOTACCESS；工作3年了，属于自学前端，目前在一家房地产软件开发公司担任前端架构师兼前端工程师；目前主要狩猎的代码方面的技术主要有js,html,css,c#,vb;及其衍生类；主打还是前端三件套吧，其实后者只是抑制不住自己内心的小波浪用来做些小软件自己使用而已，后续的话，我也会考虑把我做的一些软件公布出来；有需要的也可以试试看。 接下来我将把我私下里记录的小笔记，小套路慢慢放上来，希望能帮助到大家！","tags":[{"name":"不要脸","slug":"不要脸","permalink":"http://yoursite.com/tags/不要脸/"}]}]